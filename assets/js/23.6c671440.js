(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{263:function(s,n,a){"use strict";a.r(n);var t=a(17),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 由于 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是 Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n典型的场景比如购物车，当你点击下单按钮时，由于"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的 Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。\n\n这个Session是保存在服务端的，有一个唯一标识。\n\n在服务端保存 Session 的方法很多，内存、数据库、文件都有。\n\n集群的时候也要考虑 Session 的转移，在大型的网站，一般会有专门的 Session 服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如 Memcached 之类的来放 Session。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 思考一下服务端如何识别特定的客户？\n这个时候 Cookie 就登场了。每次 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求的时候，客户端都会发送相应的 Cookie 信息到服务端。\n实际上大多数的应用都是用 Cookie 来实现 Session 跟踪的，第一次创建 Session 的时候，服务端会在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议中告诉客户端，需要在 Cookie 里面记录一个 Session "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v("，以后每次请求把这个会话 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v(" 发送到服务器，我就知道你是谁了。\n\n有人问，如果客户端的浏览器禁用了 Cookie 怎么办？\n\n一般这种情况下，会使用一种叫做 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 重写的技术来进行会话跟踪，即每次 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 交互，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 后面都会被附加上一个诸如 sid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxxxx 这样的参数，服务端据此来识别用户。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" Cookie 其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。\n\n所以，总结一下：\nSession 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；\nCookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);